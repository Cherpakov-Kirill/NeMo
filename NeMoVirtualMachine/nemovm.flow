
export{
    VMProgram(declarations : [VMVariable], instructions : [VMInstruction]);

    VMInstruction(label : int, body : VMBody);

    VMBody ::= VMAssign, VMTest, VMPrint;
    VMAssign(var: string, value: Expression, goto : [int]);                 ///var := expr
    VMTest(operation: string, l: Expression, r: Expression, iflabel : [int], elselabel : [int]);  ///(body)?
    VMPrint(expr: Expression, goto : [int]);                                ///print(expr)

    VMVariable(name : string, type : VMType);

    VMType ::= VMInt, VMArray;
    VMInt();
    VMArray(type : VMType);

    VMExpression ::= VMMathOpExpr, VMArSetValExpr, VMArGetValExpr, VMArLenExpr, VMVarExpr, VMIntExpr;
    MathOpExpr(operation: string, l: VMExpression, r: VMExpression);
    ArSetValExpr(array: VMVarExpr, index: VMExpression, value: VMExpression);
    VMArGetValExpr(array: VMVarExpr, index: VMExpression);
    VMArLenExpr(array: VMVarExpr);
    VMVarExpr(name: string);
    VMIntExpr(value: int);
}

makeLabelsArray(labels: [flow]) -> [int]{
    concat([bodies[0]], bodies[1]);
}

makeMinusInt(bodies: [flow]) -> VMIntExpr{
    val = bodies[0];
    VMIntExpr(val*(-1));
}

vmstr2vmprogram(program : string) -> Maybe<VMProgram> {
    treeLabels = setTree(defaultPegActions.t, "makeLabelsArray", makeLabelsArray);
    fullThree = setTree(treeWhile, "makeMinusInt", makeMinusInt);
    pegActions = SemanticActions(fullThree);
    grammar = "#include NeMoVirtualMachine/nemovm.lingo";
    ret = parsic3(compilePegGrammar(grammar), program, pegActions, VMProgram([],VMPrint(VMIntExpr(0))));
    if(ret.third==""){
        Some(ret.first);
    }else{
        None();
    }
}