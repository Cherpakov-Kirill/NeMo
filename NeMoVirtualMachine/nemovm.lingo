program = sp declaration*:d sp instuction*:b sp                             {VMProgram(:d, :b)};
declaration = "VAR" sp variableName:n sp ":" sp variableType:t ";" sp       {VMVariable(:n, :t)};
instruction = sp digit+$v sp ":" sp programBody:b sp                        {VMInstruction($v, :b)};


variableType = int | array;
int = "INT" sp                      {Int()};
array = "[" variableType:t "]" sp   {Array(:t)};

programBody = assign | test | print;
assign = sp variableName:name sp ":=" sp expression:expr sp "goto" sp "{" sp intArray:labelsArray sp "}" sp {Assign(:name, :expr, :labelsArray)};
test = sp "if" sp "(" sp expression:left sp condition$cond sp expression:right sp ")" sp "then" sp "{" sp intArray:ifLabelsArray sp "}" sp "else" sp "{" sp intArray:elseLabelsArray sp "}" sp      {Test($cond, :left, :right, :ifLabelsArray, :elseLabelsArray)};
print = sp "print" "(" sp expression:expr sp ")" sp "goto" sp "{" sp intArray:labelsArray sp "}" sp                                     {Print(:expr, :labelsArray)};


intArray = "[" digit+$l labelNumbers*:arrLabels "]"     {makeLabelsArray($l, :arrLabels)};
    labelNumbers = "," sp digit+;

expression = mathOpExpr | arSetValExpr | arGetValExpr | arLenExpr | varExpr | minusInt | intExpr;
mathOpExpr = "(" sp expression:l ("+"|"*"|"/"|"-"|"%")$o sp expression:r ")" sp                             {MathOpExpr($o, :l, :r)};
arSetValExpr = "(" sp "set" "(" varExpr:arr "," sp expression:index "," sp expression:var ")" sp ")"        {ArSetValExpr(:arr, :index, :var)};
arGetValExpr = "(" sp "get" "(" varExpr:arr "," sp expression:index ")" sp ")"                              {ArGetValExpr(:arr, :index)};
arLenExpr = "(" sp "len" "(" varExpr:arr ")" sp ")"                                                         {ArLenValExpr(:arr)};
varExpr = sp letter+$l sp                                                                                   {VarExpr($l)};
minusInt = sp "-" sp digit+$v sp                                                                            {makeMinusInt(s2i(:v))};
intExpr = sp digit+$v sp                                                                                    {IntExpr(s2i(:v))};

condition   = "!=" | "==" | "<=" | ">=" | "<" | ">" ;

sp = (' ' | '\t' | '\n' | '\r')*;
variableName = letter+$s {$s};
letter = 'a'-'z';
digit  = '0'-'9';
