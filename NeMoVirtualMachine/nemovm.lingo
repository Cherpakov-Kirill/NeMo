program = sp declaration*:d sp instruction*:b sp                             {VMProgram(:d, :b)};
declaration = "VAR" sp variableName:n sp ":" sp variableType:t ";" sp       {VMVariable(:n, :t)};
instruction = sp digit+ $v sp ":" sp programBody:b sp                        {VMInstruction(s2i($v), :b)};


variableType = int | bool | array;
int = "INT" sp                      {VMInt()};
bool = "BOOL" sp                      {VMBool()};
array = "[" variableType:t "]" sp   {VMArray(:t)};

programBody = assign | test | print;
assign = sp variableName:name sp ":=" sp expression:expr sp "goto" sp "{" sp intArray:labelsArray sp "}" sp {VMAssign(:name, :expr, :labelsArray)};
test = sp "if" sp "(" sp expression:left sp condition$cond sp expression:right sp ")" sp "then" sp "{" sp intArray:ifLabelsArray sp "}" sp "else" sp "{" sp intArray:elseLabelsArray sp "}" sp      {VMTest($cond, :left, :right, :ifLabelsArray, :elseLabelsArray)};
print = sp "print" "(" sp expression:expr sp ")" sp "goto" sp "{" sp intArray:labelsArray sp "}" sp                                     {VMPrint(:expr, :labelsArray)};


intArray = labelNumbers*:arrLabels labelNumber?:l   {concat(:arrLabels, :l)};
    labelNumbers = labelNumber:l sp "," sp {:l};
    labelNumber = digit+$l {s2i($l)};

expression = mathOpExpr | arSetValExpr | arGetValExpr | arLenExpr | minusInt | intExpr | boolExpr | varExpr;
mathOpExpr = "(" sp expression:l ("+"|"*"|"/"|"-"|"%")$o sp expression:r ")" sp                             {VMMathOpExpr($o, :l, :r)};
arSetValExpr = "(" sp "set" "(" varExpr:arr "," sp expression:index "," sp expression:var ")" sp ")"        {VMArSetValExpr(:arr, :index, :var)};
arGetValExpr = "(" sp "get" "(" varExpr:arr "," sp expression:index ")" sp ")"                              {VMArGetValExpr(:arr, :index)};
arLenExpr = "(" sp "len" "(" varExpr:arr ")" sp ")"                                                         {VMArLenValExpr(:arr)};
varExpr = sp letter+$l sp                                                                                   {VMVarExpr($l)};
minusInt = sp "-" sp digit+$v sp                                                                            {makeMinusVMInt(s2i(:v))};
intExpr = sp digit+$v sp                                                                                    {VMIntExpr(s2i(:v))};
boolExpr = sp ("true" | "false")$boolVal sp                                                                 {makeVMBool($boolVal)};

condition   = "!=" | "==" | "<=" | ">=" | "<" | ">" ;

sp = (' ' | '\t' | '\n' | '\r')*;
variableName = letter+$s {$s};
letter = 'a'-'z';
digit  = '0'-'9';
