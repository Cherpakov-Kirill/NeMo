import runtime;
import NeMoVirtualMachine/nemovm;
import fileUtils;

export {
    launchVMNemoTest(filename : string) -> VMProgram;
    launchTranslatorTest(vmprog : VMProgram, filename : string) -> VMProgram;
}

parseVMNemoProgram(code : string, testTitle : string) -> VMProgram{
    println("str2vmprogram " + testTitle);
    switch (str2vmprogram(code) : Maybe<VMProgram>) {
        Some(prog):{
            println("str2vmprogram(fileContent : string)");
            println(prog);
            println("");
            prog;
        }
        None():{
            println("ParserError: " + testTitle);
            VMProgram([],[VMInstruction(0,VMPrint(VMIntExpr(0),[]))]);     
        }
    }
}

vmprogram2str2vmprogram(prog : VMProgram, testTitle : string, filename : string) -> VMProgram{
    println("vmprogram2str2vmprogram " + testTitle);
    println("vmprogram2str(NeMoProg : Program)");
    progStr = vmprogram2str(prog);
    println(progStr);
    println("");
    putCode("./tests/testsOut/" + "vmprogram2str_" + filename, progStr);
    println("");
    parseVMNemoProgram(progStr, testTitle);
}

launchVMNemoTest(filename : string) -> VMProgram{
    fileIn = "./tests/testsIn/" + filename;
    testCode = getCode(fileIn);
    vmnemoProg = parseVMNemoProgram(testCode, "string -> VMNemo");
    if(vmnemoProg != VMProgram([],[VMInstruction(0,VMPrint(VMIntExpr(0),[]))])){
        vmprogFromStrFromVMProg = vmprogram2str2vmprogram(vmnemoProg, "VMNemo -> string -> VMNemo", filename);
        if(vmnemoProg == vmprogFromStrFromVMProg) {
            println("Seccessful: VMNemo -> string -> VMNemo");
        } else {
            println("Error: VMNemo -> string -> VMNemo");
        }
    }
    println("");
    vmnemoProg;
}

launchTranslatorTest(vmprog : VMProgram, filename : string) -> VMProgram{
    println("Translator testing in VM");
    println(vmprog);
    println("");
    vmprogFromStrFromVMProg = vmprogram2str2vmprogram(vmprog, "VMNemo -> string -> VMNemo", "("+filename+").vmnemo");
    if(vmprog == vmprogFromStrFromVMProg) {
        println("Seccessful: VMNemo -> string -> VMNemo");
    } else {
        println("Error: VMNemo -> string -> VMNemo");
    }
    println("");
    vmprog;
}

/*main(){
    //test1 = launchVMNemoTest("test1.vmnemo");
    //test2 = launchVMNemoTest("test2.vmnemo");
    //test3 = launchVMNemoTest("test3.vmnemo");
    //test4 = launchVMNemoTest("test4.vmnemo");
    //test5 = launchVMNemoTest("test5.vmnemo");
    test6 = launchVMNemoTest("test6.vmnemo");
}*/