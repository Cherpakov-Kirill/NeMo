program = sp declaration*:d sp 
            "{" sp formula:beforeCond sp "}" sp 
            programBody:b sp
            "{" sp formula:afterCond sp "}" sp                          {makeSpecProgram(:d, :b, :beforeCond, :afterCond)};

declaration = "VAR" sp variableName:n sp ":" sp variableType:t ";" sp   {Variable(:n, :t)};
nameF = letter+$s {$s};


formula = 
	"(" sp formula:left "&"   sp formula:right ")" sp       		{AndF(:left, :right)} |
	"(" sp formula:left "V"   sp formula:right ")" sp       		{OrF(:left, :right)} |
	"(" sp formula:left "->"  sp formula:right ")" sp       		{ImplicationF(:left, :right)} |
	"(" sp formula:left "<->" sp formula:right ")" sp       		{makeEquivalence(:left, :right)} |
	"¬ " sp formula:form                                    		{NotF(:form)} |
	quantifier:q sp formula:form                       				{QuantifierF(:q, :form)} |
	"true" sp                                               		{TrueEF()} |
	"false" sp                                              		{FalseEF()} |
	"(" sp term:t1 sp ( condition | "=" ) $s sp term:t2 sp ")" sp 	{makeBinaryPredicate($s, :t1, :t2)} |
	nameF:name                                              		{makeVarPredicate(:name)};

term = 
	digit+$v                                    					{ConstTF(s2i($v))} |
	"(" sp term:t1 sp math $o sp term:t2 ")" sp                    	{makeMathTerm($o, :t1, :t2)} |
	"(" sp "set" "(" sp term:arr "," sp term:index "," sp term:var sp ")" sp ")" sp {makeSetTerm("set", :arr, :index, :var)} |
	"(" sp "get" "(" sp term:arr "," sp term:index sp ")" sp ")" sp {makeGetTerm("get", :arr, :index)} |
	"(" sp "len" "(" sp term:arr sp ")" sp ")" sp {makeLenTerm("len", :arr)} |
    variableName:n 													{VariableTF(:n)};

quantifier =
	"∀" sp nameF:v {ForAllQF(VariableTF(:v))} |
	"∃" sp nameF:v {ExistsQF(VariableTF(:v))};

variableType = int | bool | array;
int = "INT" sp                      {Int()};
bool = "BOOL" sp                      {Bool()};
array = "[" variableType:t "]" sp   {Array(:t)};

programBody = assign | test | sequence | choice | loop | print | ifelse | while;
assign = sp variableName:name sp ":=" sp expression:expr sp                             {Assign(:name, :expr)};
test = sp "(" sp expression:left sp condition$cond sp expression:right sp ")?" sp       {Test($cond, :left, :right)};
sequence = sp "(" programBody:body sequenceBody*:arrBodies ")" sp                       {makeSequence(:body, :arrBodies)};
    sequenceBody = ";" sp programBody;
choice = sp "(" programBody:body choiseBody*:arrBodies ")" sp                           {makeChoise(:body, :arrBodies)}; 
    choiseBody = "U" sp programBody;
loop = sp "*" sp "{" formula:inv "}" sp "(" sp programBody:body sp ")" sp               {makeSpecLoop(:body, :inv)};
print = sp "print" "(" sp expression:expr sp ")" sp                                     {Print(:expr)};
ifelse = sp "if" sp "(" sp expression:left sp condition$cond sp expression:right sp ")" sp "{" sp programBody:ifBody sp "}" sp  "else" sp "{" sp programBody:elseBody sp "}" {makeIfElse(:left, $cond, :right, :ifBody, :elseBody)};
while  = sp "while" sp "(" sp expression:left sp condition$cond sp expression:right sp ")" sp "invariant" sp "{" sp formula:inv sp "}" sp "{" sp programBody:body sp "}" sp {makeSpecWhile(:left, $cond, :right, :body, :inv)};

expression = mathOpExpr | arSetValExpr | arGetValExpr | arLenExpr | minusInt | intExpr | boolExpr | varExpr;
mathOpExpr = "(" sp expression:l sp math $o sp expression:r sp ")" sp                                             {MathOpExpr($o, :l, :r)};
arSetValExpr = "(" sp "set" "(" sp varExpr:arr "," sp expression:index "," sp expression:var sp ")" sp ")"        {ArSetValExpr(:arr, :index, :var)};
arGetValExpr = "(" sp "get" "(" sp varExpr:arr "," sp expression:index sp ")" sp ")"                              {ArGetValExpr(:arr, :index)};
arLenExpr = "(" sp "len" "(" sp varExpr:arr sp ")" sp ")"                                                         {ArLenExpr(:arr)};
varExpr = sp letter+$l sp                                                                                   {VarExpr($l)};
minusInt = sp "-" sp digit+$v sp                                                                            {makeMinusInt(s2i(:v))};
intExpr = sp digit+$v sp                                                                                    {IntExpr(s2i(:v))};
boolExpr = sp ("true" | "false")$boolVal sp                                                                 {makeBool($boolVal)};

condition   = "!=" | "==" | "<=" | ">=" | "<" | ">" ;
math = "+" | "*" | "/" | "-" | "%";

sp = (' ' | '\t' | '\n' | '\r')*;
variableName = letter+$s {$s};
letter = 'a'-'z';
digit  = '0'-'9';


