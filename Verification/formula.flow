import string;

export {
    TermF ::= VariableTF, ConstTF, FunctionTF;
        VariableTF(name : string);
		ConstTF(value : int);
		FunctionTF(op : string, arguments : [TermF]);

    Formula ::= ElementaryF, AndF, OrF, ImplicationF, NotF, QuantifierF;
        ElementaryF ::= PredicateEF, TrueEF, FalseEF;
            PredicateEF(name : string, arguments : [TermF]);
            TrueEF();
            FalseEF();            
        AndF(leftFormula : Formula, rightFormula : Formula);
        OrF(leftFormula : Formula, rightFormula : Formula);
        ImplicationF(ifFormula : Formula, thenFormula : Formula);
        NotF(formula : Formula);
        QuantifierF(quantifier : Quantifier, formula : Formula);
            Quantifier ::= ForAllQF, ExistsQF;
                ForAllQF(variable: VariableTF);
                ExistsQF(variable: VariableTF);

    formula2s(f : Formula) -> string;
    term2s(t : TermF) -> string;
	replacingVariableInFormula(form : Formula, variable : string, term : TermF) -> Formula;
}

formula2s(f : Formula) -> string {
	switch (f) {
		AndF(leftF, rightF):  "(" + formula2s(leftF) + " & " + formula2s(rightF) + ")";
		OrF(leftF, rightF):   "(" + formula2s(leftF) + " V " + formula2s(rightF) + ")";
		ImplicationF(leftF, rightF): "(" + formula2s(leftF) + " -> " + formula2s(rightF) + ")";
		NotF(form): "¬ " + formula2s(form);
		QuantifierF(quantifier, form):
			switch(quantifier) {
				ForAllQF(var): "∀" + var.name + "." + formula2s(form);
				ExistsQF(var): "∃" + var.name + "." + formula2s(form);
			}
		PredicateEF(n, args):
			if (args == []) n else {
				n + "(" + rtrim2(fold(args, "", \acc, arg -> acc + term2s(arg) + ", "),", ") + ")";
			}
		TrueEF(): "true";
		FalseEF(): "false";
	}
}

term2s(t : TermF) -> string {
	switch (t) {
		VariableTF(name) : name; 
		ConstTF(value) : i2s(value);
		FunctionTF(op, args): op + "(" + rtrim2(fold(args, "", \acc, arg -> acc + term2s(arg) + ", "),", ") + ")";
	}
}

replacingVariableInFormula(form : Formula, variable : string, term : TermF) -> Formula {
	switch (form) {
		AndF(left, right):  AndF(replacingVariableInFormula(left, variable, term), replacingVariableInFormula(right, variable, term));
		OrF(left, right):   OrF(replacingVariableInFormula(left, variable, term), replacingVariableInFormula(right, variable, term));
		ImplicationF(left, right): ImplicationF(replacingVariableInFormula(left, variable, term), replacingVariableInFormula(right, variable, term));
		NotF(formula):      NotF(replacingVariableInFormula(formula, variable, term));
		QuantifierF(quantifier, formula): QuantifierF(quantifier, replacingVariableInFormula(formula, variable, term));
		PredicateEF(name, args): PredicateEF(name, map(args, \a -> replacingVariableInTerm(a, variable, term)));
		TrueEF():  form;
		FalseEF(): form;
	}
}

replacingVariableInTerm(t : TermF, variable : string, term : TermF) -> TermF {
	switch (t) {
		VariableTF(name): if (name == variable) term else t;
		ConstTF(value): t;
		FunctionTF(op, arguments): FunctionTF(op, map(arguments, \arg -> replacingVariableInTerm(arg, variable, term)));
	}
}
