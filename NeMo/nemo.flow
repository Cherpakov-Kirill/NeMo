import runtime;
import lingo/pegcode/driver;

export {
    Program(declarations : [Variable], body : Body);

    Body ::= Assign, Test, Sequence, Choice, Loop, Print;
    Assign(var: string, value: Expression);                 ///var := expr
    Test(operation: string, l: Expression, r: Expression);  ///(body)?
    Sequence(bodies: [Body]);                               ///(body1;body2)
    Choice(bodies: [Body]);                                 ///(body1 U body2)
    Loop(body: Body);                                       ///(body)*
    Print(expr: Expression);                                ///print(expr)

    Variable(name : string, type : Type);

    Type ::= Int, Array;
    Int();
    Array(type : Type);

    Expression ::= MathOpExpr, ArSetValExpr, ArGetValExpr, ArLenExpr, VarExpr, IntExpr;
    MathOpExpr(operation: string, l: Expression, r: Expression);
    ArSetValExpr(array: VarExpr, index: Expression, value: Expression);
    ArGetValExpr(array: VarExpr, index: Expression);
    ArLenExpr(array: VarExpr);
    VarExpr(name: string);
    IntExpr(value: int);

    str2program(program: string) -> Maybe<Program>;
    program2str(program: Program) -> string;
}

makeSequence(bodies: [flow]) -> Sequence{
    Sequence(concat([bodies[0]], bodies[1]));
}

makeChoise(bodies: [flow]) -> Choice{
    Choice(concat([bodies[0]], bodies[1]));
}

reverseCondition(cond : string) -> string{
    if(cond == "==") {
         "!=";
      }else if(cond == "!=") {
         "==";
      }else if(cond == "<=") {
         ">";
      }else if(cond == ">="){
         "<";
      }else if(cond == "<") {
         ">=";
      }else if(cond == ">") {
         "<=";
      }else {
         "";
      }
}

makeIfElse(bodies: [flow]) -> Choice{
    leftExpr = bodies[0];
    cond = bodies[1];
    rightExpr = bodies[2]; 
    ifBody = bodies[3]; 
    elseBody = bodies[4];
    Choice([
        Sequence([Test(cond, leftExpr, rightExpr), ifBody]),
        Sequence([Test(reverseCondition(cond), leftExpr, rightExpr), ifBody])
    ]);
}

makeWhile(bodies: [flow]) -> Sequence{
    leftExpr = bodies[0];
    cond = bodies[1];
    rightExpr = bodies[2]; 
    body = bodies[3];
    Sequence([
        Loop(Sequence([Test(cond, leftExpr, rightExpr), body])),
        Test(reverseCondition(cond), leftExpr, rightExpr)
    ]);
}

makeMinusInt(bodies: [flow]) -> IntExpr{
    val = bodies[0];
    IntExpr(val*(-1));
}

str2program(program: string) -> Maybe<Program> {
    treeSequence = setTree(defaultPegActions.t, "makeSequence", makeSequence);
    treeChoice = setTree(treeSequence, "makeChoise", makeChoise);
    treeIf = setTree(treeChoice, "makeIfElse", makeIfElse);
    treeWhile = setTree(treeIf, "makeWhile", makeWhile);
    fullThree = setTree(treeWhile, "makeMinusInt", makeMinusInt);
    pegActions = SemanticActions(fullThree);
    grammar = "#include NeMo/nemo.lingo";
    ret = parsic3(compilePegGrammar(grammar), program, pegActions, Program([],Print(IntExpr(0))));
    if(ret.third==""){
        Some(ret.first);
    }else{
        None();
    }
}

program2str(program: Program) -> string{
    declarations = variables2str(program.declarations);
    progBody = progBody2str(program.body);
    declarations + progBody;
}

variables2str(vars : [Variable]) -> string {
    variableStrings = map(vars, variable2str);
    concatStrings(variableStrings);
}

variable2str(var : Variable) -> string {
    nameStr = var.name;
    typeStr = type2str(var.type);
    "VAR " + nameStr + " : " + typeStr + ";\n";
}

type2str(type: Type) -> string{
    switch (type : Type) {
        Int(): {
            "INT";
        }
        Array(t): {
            "[" + type2str(t) + "]";
        }
    }
}

addEndOfLine(str : string) -> string{
    if(strlen(str)>30){
        str + "\n";
    } else {
        str;
    }
}

progBody2str(body : Body) -> string {
    switch (body) {
        Assign(var, value): {
            var + " := " + expression2str(value);
        }
        Test(operation, leftExpr, rightExpr): {
            addEndOfLine("(" + expression2str(leftExpr) + " " + operation + " " + expression2str(rightExpr) + ")?");
        }
        Sequence(bodies): {
            addEndOfLine("(" + rtrim2(fold(bodies, "", \acc, body_i -> acc + progBody2str(body_i) + "; "),"; ") + ")");
        }             
        Choice(bodies): {
            addEndOfLine("(" + rtrim2(fold(bodies, "", \acc, body_i -> acc + progBody2str(body_i) + " U ")," U ") + ")");
        }                
        Loop(progBody): {
            addEndOfLine("*(" + progBody2str(progBody) + ")");
        }                       
        Print(expr): {
            addEndOfLine("print(" + expression2str(expr) + ")");
        }
    }
}

expression2str(expr : Expression) -> string {
    switch (expr) {
        MathOpExpr(operation, l, r): {
            "(" + expression2str(l) + " " + operation + " " + expression2str(r) + ")";
        }
        ArSetValExpr(array, index, value): {
            "(set(" + expression2str(array) + ", " + expression2str(index) + ", " + expression2str(value) + "))";
        }
        ArGetValExpr(array, index): {
            "(get(" + expression2str(array) + ", " + expression2str(index) + "))";
        }
        ArLenExpr(array): {
            "(len(" + expression2str(array) + "))";
        }
        VarExpr(name): {
            name;
        }
        IntExpr(value): {
            i2s(value);
        }
    }
}